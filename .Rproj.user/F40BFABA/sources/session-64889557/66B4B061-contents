---
title: "Getting Started with the ABM Package in R"
author: "Sasha D. Hafner and Frederik R. Dalby"
date: "`r Sys.Date()`"
fig_width: 6 
fig_height: 4 
output: rmarkdown::html_vignette
vignette: >
  %\VignetteIndexEntry{ABM_start}
  %\VignetteEngine{knitr::rmarkdown}
  %\VignetteEncoding{UTF-8}
---

```{r,echo=FALSE}
knitr::opts_chunk$set(fig.width=6, fig.height=4)
options(width = 85)
```

# 1. Overview
The ABM model predicts conversion of organic material in animal manure or other (high-moisture) organic wastes to methane (CH~4~), carbon dioxide (CO~2~) and ammonia (NH~3~) under anaerobic conditions.
The name comes from **a**naerobic **b**iodegradation **m**odel.
With multiple methanogen groups and group-specific parameters describing kinetics and yield, the model can predict realistic short- and long-term responses to temperature change and other perturbations.
Although it was prediction of CH~4~ emission from stored animal slurry (liquid manure) in unheated channels or tanks that prompted development of the model, the model can be used to simulate CH~4~ emission or biogas production from other organic waste under a range of conditions, including in anaerobic digesters.
The purpose of this document is to demonstrate the use of the ABM R package, which is a flexible implementation of the model.
Details on the model will be available in publications in the near future.

# 2. Installation
The ABM package is available on GitHub and so can be installed with the `install_github()` function from the devtools package, which must be installed first.
These steps should be carried out once to install both packages:

```{r, eval=FALSE}
install.packages('devtools')
devtools::install_github('AU-BCE-EE/ABM', build_vignettes = FALSE)
```

And to use the ABM model, the package must be loaded.

```{r,eval= TRUE}
library(ABM)
```

And to view this vignette, use:

```{r}
vignette('ABM_start')
```

```{r,eval = FALSE, echo=FALSE}
ff <- list.files('../R', full.names = TRUE)
for (i in ff) source(i)
```

# 3. A demonstration
A demonstration is presented in this section to show what the abm() function can do.
For a more incremental introduction to the function, see the following sections.

First we will start with a demonstration using the default input parameters, which reflect manure production in a pig-house with 1000 finisher growing pigs. In-house slurry pits are 0.6 m deep and the slurry is flushed out of the pig-house every 28 days, leaving 5 cm of residual slurry inside the in-house slurry pits. The slurry temperature is 20&degC. The amount of degradable VS content of raw pig manure is set to 75 gCOD/kg manure (feces + urine). 

To predict in-house manure methane emission we can make the following call, specifying that we want to run the model for 365 days 

```{r}
out0 <- abm(365) # run the simulation for 365 days
```
Â¨
Lets take a look at the output 
```{r}
line_colors <- c('red', 'blue', 'green')
matplot(out0$time, out0[, nn <- c('m0','m1','m2')]/1000, 
        type = 'l', lty = c(1:length(nn)), col = line_colors, xlab = 'Time (d)', ylab = 'Microbial biomass (kg)')
legend("topright", legend = nn, lty = c(1:length(nn)), col = line_colors, lwd = 1,
       title = "Microbial biomass", cex = 0.8)

matplot(out0$time, out0[, nn <- c('CH4_emis_rate', 'CO2_emis_rate', 'NH3_emis_rate')]/1000, 
        type = 'l', lty = c(1:length(nn)), col = line_colors, xlab = 'Time (d)', ylab = 'Emission rate (kg/day)')
legend("topright", legend = nn, lty = c(1:length(nn)), col = line_colors, lwd = 1,
       title = "Emission rates", cex = 0.8)

```
Methane and carbon dioxide emission rates follow a clear pattern correlated with the amount of slurry in the slurry pits, which is flushed out every 28 days. 

So how much methane per pig per year from the in-house emission?
We can use the cumulative methane output and the fact that slurry production rate default is for 1000 pigs.
For ammonia we might want to have emissions per production area. Since we assume that the floor is fully slatted, we can assume that the production area of the pigs are equal to the slurry surface area 

```{r}
pigs <- 1000
CH4_kg_pr_pig_pr_year <- max(out0$CH4_emis_cum)/1000/pigs 
CH4_kg_pr_pig_pr_year
CO2_kg_pr_pig_pr_year <- max(out0$CO2_emis_cum)/1000/pigs 
CO2_kg_pr_pig_pr_year
NH3_kg_pr_pig_pr_year <- max(out0$NH3_emis_cum)/1000/out0$area[1]
NH3_kg_pr_pig_pr_year
C_ratio <- (CH4_kg_pr_pig_pr_year * 12/16) / (CO2_kg_pr_pig_pr_year * 12/44 + CH4_kg_pr_pig_pr_year * 12/16)
C_ratio
```
Only 23.5% of carbon emission is methane, suggesting that a lot of carbon dioxide comes from non methanogenic processes (urea hydrolysis and surface respiration).  

We can continue our calculations by doing another simulation of emissions coming from the outside slurry tank, by using the effluents from the in-house simulation as input for our storage simulation. 
To do this we extract the effluent slurry masses and pass to the new simulation as a data.frame using the add_pars argument. With add_pars we can change the default input parameters. In the outside storage, the temperature will also changes considerably over the year, so temperature will also be passed as a data.frame(). We will get our temperature data another file. Since Some VS was degraded in the barn we have to change the VS in the manure going to the outside storage also.

```{r}
# fix this. 
out0 <- out0[!duplicated(out0$time), ]
slurry_mass_intp <- approx(out0$time, out0$slurry_mass_eff, xout = out0$time)$y
slurry_mass_cum <- cumsum(slurry_mass_intp)
slurry_mass_dat <- data.frame(time = out0$time, slurry_mass = slurry_mass_cum)
slurry_mass_dat
VSd_fresh <- mean(out0$VSd_eff_conc, na.rm = T)
VSd_fresh
temp_dat <- read.csv('../dat/outside_slurry_temp.csv', sep = ';')
temp_dat

```

Lets look at temperature and slurry data before we continue

```{r}
plot(slurry_mass_dat$time, slurry_mass_dat$slurry_mass, ylab = 'Slurry_mass (kg)', 
     xlab = 'Time (days from 1. Apr)')
plot(temp_dat$time, temp_dat$temp_C, ylab = 'Temperature (deg C)', xlab = 'Time (days from 1. Apr)')
```

```{r}


out1 <- abm(365, add_pars = list(slurry_mass = slurry_mass_dat, temp_C = temp_dat, conc_fresh.VSd = VSd_fresh, conc_fresh.urea = 0))

```

We can assess the fresh concentration of organic matter componenets from the "conc_fresh" 

```{r}
out1 <- abm(365, add_pars = list(slurry_mass = slurry_mass_dat, temp_C = temp_dat, conc_fresh.VSd = VSd_fresh, conc_fresh.urea = 0))

```

We see a shift away from the most cold-tolerant (`m0` and `m1`, 18&degC optimum) to groups with higher optima (especially `m2`, 28&degC optimum) as the slurry warms, and the reverse during cooling.

Methane production depends on these populations, but also available substrate and hydrolysis rate (itself temperature-dependent).
Particulate substrate, in turn, depends on the quanity of slurry in the storage, but also prior consumption.
Together these effects give the complex pattern in CH~4~ emission (rate and then cumulative) shown below.

```{r}
plot(CH4_emis_rate ~ time, data = out0, type = 'l', xlab = 'Time (d)', ylab = 'Emission rate (g/d)')
plot(CH4_emis_cum ~ time, data = out0, type = 'l', xlab = 'Time (d)', ylab = 'Cumulative emission (g)')
```
Some of the spikes in CH~4~ production are related to low methanogen activity, which is reflected in VFA accumulation.
Temperature plays a major role in determining this pattern.

```{r}
plot(VFA_conc ~ time, data = out0, type = 'l', xlab = 'Time (d)', ylab = 'VFA conc. (g/kg)')
```

Because all output variables seem stable after two years, we might exclude the first 730 days when, for example, evaluating mitigation options.
Furthermore, we can also focus on total emission in the last year.

```{r}
out0a <- abm(3*365, add_pars = list(temp_C = temp_dat, storage_depth = 4, area = 1000, slurry_mass = 0.3 * 4 * 1000, empty_int = 182.5), startup = 730, value = 'summ')
out0a
```

Results show total annual emission of about 10 t CH~4~, representing 31% of available COD.

```{r}
out0a['CH4_emis_cum']
out0a['f_COD_CH4']
```

How much might acidification reduce emission?
We can easily make a comparison to a scenario with pH reduced to 5.5, with everything else the same.pH is indirectly affecting methane because reduced pH increase concentration of toxic H2S, and protonated VFAs.


```{r}
out0b <- abm(3*365, add_pars = list(temp_C = temp_dat, storage_depth = 4, area = 1000, slurry_mass = 0.3 * 4 * 1000, empty_int = 182.5, pH = 5.5), startup = 730, value = 'summ')
out0b
```

The predicted reduction is 98.6%.

```{r}
1 - out0b['CH4_emis_cum'] / out0a['CH4_emis_cum']
```

# 4. A simple example: methane emission from stored slurry
By default, the `abm()` function simulates degradation of animal manure accumulating in a 33 m^3^ storage tank or channel with a 30 day emptying interval.
Fresh slurry is added continuously at a rate of 1000 kg d^-1^, and when emptied a residual of 10% of the total manure mass is left in the storage.
Default values are included for all arguments, including the first two, which set the length of the simulation (365 d) and the time interval in the output (1 d).

In this example, the model is used to predict dynamics of CH~4~ emission, microbial biomass, and VFA accumulation.
The following call runs the ABM model with default argument values.

```{r}
out1 <- abm()
```

Output is, by default, a data frame with predicted variables over time (see Section 5 for alternatives).
Typically the primary variable of interest is CH~4~ emission, which is returned as a total (g) and rate (g/d), overall or normalized to COD or VS loading.
The complete list of these output variables are:

```{r}
names(out1[grepl('^CH4', names(out1))])
```

Total cumulative emission (g) and emission rate (g/d) are plotted below.

```{r}
plot(CH4_emis_cum ~ time, data = out1, type = 'l', ylab = 'Cumulative emission (g)')
plot(CH4_emis_rate ~ time, data = out1, type = 'l', ylab = 'Emission rate (g/d)')
```

Microbial biomass (g) is given in columns with names that match those used for the names of the groups (defaults shown below, set within the `grp_pars` argument--see Section 6).

```{r}
matplot(out1$time, out1[, nn <- c('m0','m1','m2')], 
        type = 'l', lty = 1, xlab = 'Time (d)', ylab = 'Microbial biomass (g)')
legend('topleft', nn, col = 1:6, lty = 1)
```


Dynamics in production of CH~4~ are often related to VFA accumulation, and VFA mass (g) and concentration (g/kg) can be extracted.

```{r}
plot(VFA ~ time, data = out1, type = 'l')
plot(VFA_conc ~ time, data = out1, type = 'l')
```
For more information on the many output variables returned by `abm()`, see the section on that topic below.

# 5. Setting parameter values
Although the ABM model is relatively simple, explicitly simulating the activity of multiple microbial groups means there are many parameters. 
The complete list and definitions can be seen in the help file, accessible with the following command.

```{r,eval=FALSE}
?abm
```

Alternatively, use `args()` just to see the arguments and default values.

```{r}
args(abm)
```

Parameters are grouped to make changes easier (and to prevent input mistakes) and to limit the number of parameter names that are needed.
The `mng_pars` argument contains parameters related to management; `man_pars` describes the incoming manure or feed; `grp_pars`, the most extensive argument, is used to define the microbial groups; `mic_pars` contains other microbial parameters that do not vary among groups; and `chem_pars` sets some chemical/physical parameters.
But there are also some built-in shortcuts to make small tweaks simple.
In particular, the `add_pars` argument makes life easy.

As an example, the composition of the fresh slurry (influent, or feed) is set with the `man_pars` argument, which is a list of solute concentrations and pH.
By default:
