---
title: "An introduction to the ATM99 model in R"
output: rmarkdown::html_vignette
vignette: >
  %\VignetteIndexEntry{Put the title of your vignette here}
  %\VignetteEngine{knitr::rmarkdown}
  \usepackage[utf8]{inputenc}
---

```{r}
options(width = 85)
```


# Overview
The ATM99 model predicts conversion of animal manure or other high-moisture organic wastes to methane (CH~4~) and carbon dioxide (CO~2~) under anaerobic conditions.
The name comes from **a**naerobic **t**ransformation **m**odel, and 99 represents the unlimited number of microbial groups that can be included. 
With multiple microbial groups and group-specific parameters describing kinetics and yield, the model can predict realistic short- and long-term responses to temperature change.
Although it was storage of organic waste (animal manure) in unheated tanks that drove the initial development of the model, with its flexibility it is well-suited to simulate biogas production from organic waste in anaerobic digesters, particularly in the presence of temperature variation.
The purpose of this document is to demonstrate the use of the ATM99 R package, which is a flexible implementation of the model.
The focus here is on the *use* of the `atm()` function; for a detailed description of the model itself, see Dalby et al. (2020a, 2020b).

# Installation
The ATM99 package is available on GitHub and so can be installed with the `install_github()` function from the devtools package, which must be installed first.
These steps must be carried out once to install both packages:

```{r, eval=FALSE}
install.packages('devtools')
devtools::install_github('sashahafner/ATM99')
```

And to use the ATM99 model, the package must be loaded.

```{r}
library(ATM99)
```

# REMOVE LATER
```{r}
ff <- list.files('../R', full.names = TRUE)
for (i in ff) source(i)
ls()
```

# A simple example
By default, the `atm()` function simulates degradation of animal manure from a 33 m^3^ storage tank with a 30 day emptying interval.
Fresh slurry is added continuously at a rate of 1000 kg d^-1^.
Default values are included for all arguments, including the first two, which set the length of the simulation (365 d) and the time interval in the output (1 d).

```{r}
pred1 <- atm()
```

Output is, by default, a data frame with predicted variables over time.
Typically the primary variable of interest is CH~4~ emission, which is returned as a total (g) and rate, overall or normalized to COD or VS mass:

```{r}
names(pred1[grepl('^CH4', names(pred1))])
```

Total cumulative emission (g) and emission rate (g/d) are plotted below.

```{r}
plot(CH4_emis_cum ~ time, data = pred1, type = 'l')
plot(CH4_emis_rate ~ time, data = pred1, type = 'l')
```

Microbial biomass (g) is given in columns with the names set in the `grp_pars` argument.

```{r}
matplot(pred1$time, pred1[, c('m1', 'm2', 'm3', 'p1', 'p2', 'sr1')], type = 'l')
```

Because of a default temperature of 23 (NTS: why so high???) methanogen `m3` dominates.
Biomass concentrations (g/kg) may be more informative.

```{r}
plot(m3_conc ~ time, data = pred1, type = 'l')
```

Dynamics in production of CH~4~ are often related to VFA accumulation, and VFA mass (g) and concentration (g/kg) can be extracted.
For more information on the many output variables returned by `atm()`, see the section on that topic below.

```{r}
plot(VFA ~ time, data = pred1, type = 'l')
plot(VFA_conc ~ time, data = pred1, type = 'l')
```

# Setting parameter values
Although the ATM99 model is relatively simple, explicitly simulating the activity of multiple microbial groups means there are a lot of parameters. 
The complete list can be seen in the help file.

```{r,eval=FALSE}
?atm
```

Parameters are grouped to make changes easier (or to prevent mistakes) and to limit the number of parameter names that are needed.
But there are also some shortcuts built into the `atm()` funtion to make small tweaks simple.

As an example, the composition of the fresh slurry (influent, or feed) is set with the `man_pars` argument, which is a list of solute concentrations and pH.
By default:
```
man_pars = list(conc_fresh = list(S2 = 0.0, SO4 = 0.2, TAN = 1.0, VFA = 4.0, Sp = 65, COD = 170), 
                pH = 7), ...
```
To simulate a lower pH then, the following call could be used:

```{r}
pred2 <- atm(365, 1, man_pars = list(conc_fresh = list(S2 = 0.0, SO4 = 0.2, TAN = 1.0, 
                                                       VFA = 4.2, Sp = 65, COD = 160), 
                                     pH = 6))
```

```{r}
plot(CH4_emis_rate ~ time, data = pred1, type = 'l', xlab = 'Time (d)', ylab = expression('CH'[4]~'emission (g/d)'))
lines(CH4_emis_rate ~ time, data = pred2, type = 'l', col = 'red')
```

Alternatively, the special `add_pars` argument can be used to specify just those parameters (or individual parameter elements) that will be changed from their defaults.

```{r}
pred2b <- atm(365, 1, add_pars = list(pH = 6))
all.equal(pred2, pred2b)
```

Note that the `man_pars` name is not needed for the `add_pars` option.

Many arguments for the `atm()` function are named lists or vectors.
These arguments--or even one element within them--can still be specified using `add_pars`.
For example, to change only the VFA value for `conc_fresh` use the following call.


```{r}
pred3 <- atm(365, 1, add_pars = list(pH = 6, conc_fresh.VFA = 10))
```

This shortcut is referred to as the "par.element" approach, and the `.` is a special character used to separate parameter (here, `conc_fresh`) and element (here, `VFA`) names.
(If desired, a different character can be selected with the `par_key` argument.)

Of course, specifying all elements is always an option,

```{r}
pred3b <- atm(365, 1, add_pars = list(pH = 6, conc_fresh = list(S2 = 0.0, SO4 = 0.2, TAN = 1.0, VFA = 10, Sp = 65, COD = 160)))
```

as is specifying a complete argument of parameters (as in `pred2` above).

Setting arguments is explored further in the section on defining microbial groups below.

# Output options
By default, the `atm()` function returns a data frame with cumulative CH~4~ emission and other state variables, normalized in a variety of ways.
In total there are more than 300 columns---the first 20 are shown below.

```{r}
pred1 <- atm(365, 1)
pred1[1:3, 1:20]
```

Microbial biomass values (g COD) are present in the columns that directly follow time (d).
Emission of CH~4~ and CO~2~ are included as cumulative values (g), rates (g/d), and both types are also normalized by loading of COD, degradable COD (`dCOD`), and VS.
The fraction of loaded COD converted through methanogenesis, respiration, and sulfate reduction is also given.
For example, fractional conversion of COD to CH~4~ based on instantaneous rates and cumulative values are shown in the plot below.

```{r}
plot(f_COD_CH4_rate ~ time, data = pred1, type = 'l', col = 'blue')
lines(f_COD_CH4_cum ~ time, data = pred1, col = 'red')
```

Overall results can be extracted by changing the `value` argument to `sum` (for summary).

```{r}
pred1s <- atm(365, 1, value = 'sum')
pred1s
```

And an arbitrary startup period can be excluded using the `startup` argument.
For example, results are based on the last 165 days in the example below.

```{r}
pred1s <- atm(365, 1, value = 'sum', startup = 200)
pred1s
```

Set the `value` argument to `'all'` for time series data and the summary.

# Defining microbial groups

# Simulating reactors

# Temperature variation
The 

# Temperature shocks

# Acidification

# Picking up where you left off

# 


